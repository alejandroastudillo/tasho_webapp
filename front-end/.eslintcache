[{"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/index.js":"1","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/App.js":"2","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/serviceWorker.js":"3","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/MainComponent.js":"4","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/control/Header.js":"5","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/control/ControlComponent.js":"6","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/context/GUIContext.js":"7","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/WorldViewer.js":"8","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/index.js":"9","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Lights.js":"10","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/CameraControl.js":"11","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Plane.js":"12","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Ball.js":"13","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/RobotVisual.js":"14","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Box.js":"15","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Bin.js":"16","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Spline.js":"17","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/TennisBalls.js":"18"},{"size":675,"mtime":1634197920976,"results":"19","hashOfConfig":"20"},{"size":286,"mtime":1634633409774,"results":"21","hashOfConfig":"20"},{"size":5086,"mtime":1604698580967,"results":"22","hashOfConfig":"20"},{"size":849,"mtime":1607423584227,"results":"23","hashOfConfig":"20"},{"size":1509,"mtime":1634634927237,"results":"24","hashOfConfig":"20"},{"size":40184,"mtime":1634828031559,"results":"25","hashOfConfig":"20"},{"size":160,"mtime":1606298831616,"results":"26","hashOfConfig":"20"},{"size":1817,"mtime":1634836637467,"results":"27","hashOfConfig":"20"},{"size":456,"mtime":1634836130615,"results":"28","hashOfConfig":"20"},{"size":445,"mtime":1634643891201,"results":"29","hashOfConfig":"20"},{"size":721,"mtime":1634826500396,"results":"30","hashOfConfig":"20"},{"size":1238,"mtime":1634737751712,"results":"31","hashOfConfig":"20"},{"size":1204,"mtime":1634836155900,"results":"32","hashOfConfig":"20"},{"size":5392,"mtime":1634824760850,"results":"33","hashOfConfig":"20"},{"size":655,"mtime":1634825373505,"results":"34","hashOfConfig":"20"},{"size":8823,"mtime":1634814104407,"results":"35","hashOfConfig":"20"},{"size":6652,"mtime":1634833214784,"results":"36","hashOfConfig":"20"},{"size":472,"mtime":1634836147932,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"b68rm",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/index.js",[],["80","81"],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/App.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/serviceWorker.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/MainComponent.js",["82","83","84"],"import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Header from './control/Header';\nimport ControlPanel from './control/ControlComponent';\n\nimport { GUIContext } from '../context/GUIContext';\n\nconst initial_state = { // initial state object that will be used in our reducer\n    expert_mode: false,\n    night_mode: false,\n  };\n\nconst reducer = (state, action) => {\n\n    return {\n        ...state,\n        expert_mode: action.expert_mode,\n        night_mode: action.night_mode\n    };\n\n};\n\nfunction Main() {\n\n    const [state, dispatch] = React.useReducer(reducer, initial_state);\n    return(\n        <GUIContext.Provider value={{state, dispatch }}>\n            <div>\n                <Header />\n                <ControlPanel />\n            </div>\n        </GUIContext.Provider>\n    );\n\n}\n\nexport default Main;\n","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/control/Header.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/control/ControlComponent.js",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from \"axios\";\nimport Konva from \"konva\";\n// import { Stage, Layer, Rect, Circle, Line, Text } from 'react-konva';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n// import ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Image from 'react-bootstrap/Image';\n// import Modal from 'react-bootstrap/Modal';\n\n// import RobotViewer from './RobotViewer';\nimport { css, jsx, Global } from \"@emotion/react\";\nimport { WorldViewer } from \"../WorldViewer.js\";\n\n\nimport rockit_logo from '../../assets/images/rockit.png';\n\nimport { Scatter } from 'react-chartjs-2';\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { materialDark, vs } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\n\nconst globalStyles = css`\n  *, *::after, *::before {\n    box-sizing: border-box;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-smoothing: antialiased;\n  }\n`;\n\n\nconst craneRealWidth = 0.7;\nconst craneRealHeight = 1.3;\n\nconst cart_width = 100;\n\nconst trail_length = 100;\n\nconst SOLVER_INACTIVE = 0;\nconst SOLVER_WAIT = 1;\nconst SOLVER_ERROR = 2; // Transmission fail\nconst SOLVER_SUCCESS = 3;\nconst SOLVER_TIMEOUT = 4;\nconst SOLVER_INFEASIBLE = 5;\nconst SOLVER_FAIL = 6;\n\nconst lbx = 0;\nconst ubx = 0.5;\nconst lbh = 0.4;\nconst ubh = 1.1;\n\nconst v_offset = 0.0;\n\nconst A_start = [0.05,-1.1+v_offset];\nconst B_start = [0.44,-0.98+v_offset];\n\nconst C_start = [0.1442988204456094, -0.8+v_offset];\nconst D_start = [0.34089121887287027, -0.7284403669724768+v_offset];\n\nconst obs1_radius_start = 0.1;\nconst obs1_center_start = [ 0.2977064220183487,-0.7568807339449543+v_offset];\n\nconst solverLabel = {[SOLVER_INACTIVE]: \"\",\n                     [SOLVER_WAIT]: \"Solving\",\n                     [SOLVER_ERROR]: \"Error\",\n                     [SOLVER_SUCCESS]: \"Success\",\n                     [SOLVER_TIMEOUT]: \"Timeout\",\n                     [SOLVER_INFEASIBLE]: \"Infeasible\",\n                     [SOLVER_FAIL]: \"Failed\"};\n\nconst solverColor = {[SOLVER_INACTIVE]: \"white\",\n                     [SOLVER_WAIT]: \"gray\", // #\"#FFA500\",\n                     [SOLVER_ERROR]: \"black\",\n                     [SOLVER_SUCCESS]: \"green\",\n                     [SOLVER_TIMEOUT]: \"red\",\n                     [SOLVER_INFEASIBLE]: \"red\",\n                     [SOLVER_FAIL]: \"red\"};\n\n\nconst ControlPanel = () => {\n  // Variables for enabling the camera control in the world viewer\n    const cameraControlKey = 67; //CTRL:17, C:67, SHIFT:16, ALT:262144\n    const [enableCameraControls, setEnableCameraControls] = useState(false);\n\n  // Variables for crane size\n    const [craneArea, setCraneArea] = useState({x: 0, y: 0, width: 750, height: 700, borderX: 17, borderY: 18 });\n\n    const [mainArea, setMainArea] = useState({x: 0, y: 0, width: 750, height: 700});\n\n  // Variables for stage size\n    const [stageSize, setStageSize] = useState({width: 1000, height: 750});\n\n  // Variable to manage trajectory line\n    const [line, setLine] = useState({points: [100, 1685, 470, 1685]});\n    const [lineTunnel, setLineTunnel] = useState({points: [100, 1685, 470, 1885]});\n    const [lineTraj, setLineTraj] = useState({points: [100, 1685, 470, 1685]});\n\n    const [solverState, setSolverState] = useState(SOLVER_INACTIVE);\n\n    const [obsCount, setObsCount] = useState(1);\n\n  // Variables to manage obstacles position and visibility\n    const [obs1, setObs1] = useState({x: 285, y: 685, radius: obs1_radius_start, isVisible: false});\n    const [obs2, setObs2] = useState({x: 350, y: 685, radius: obs1_radius_start, isVisible: false});\n\n    const [boundaries, setBoundaries] = useState([-100,-100,0]);\n\n    const [ dragging, setDragging ] = useState(false);\n\n  // Variable for slider\n    const [ maxAngle, setMaxAngle ] = useState(0.75);\n\n    const [ init, setInit ] = useState(0.4);\n\n  // console log\n    const [ consoleLog, setConsoleLog ] = useState(\"\");\n\n    const [ problemMode, setProblemMode ] = useState('naive');\n\n    const [ trackingMode, setTrackingMode ] = useState('none');\n    const [ trackingWeight, setTrackingWeight ] = useState(1);\n\n  // Switches\n    const [ enableNoSwing, setEnableNoSwing ] = useState(true);\n    const [ enableObstacleAvoidance, setEnableObstacleAvoidance ] = useState(false);\n\n  // Tunnel state\n    const [ tunnel, setTunnel ] = useState({\n      radius: 0.05\n    });\n\n    // Points\n    const [ A, setA ] = useState(convertCoordinatesToDOM(A_start[0],A_start[1]));\n    const [ B, setB ] = useState(convertCoordinatesToDOM(B_start[0],B_start[1]));\n    const [ C, setC ] = useState(convertCoordinatesToDOM(C_start[0],C_start[1]));\n    const [ D, setD ] = useState(convertCoordinatesToDOM(D_start[0],D_start[1]));\n\n    const currentOcpStateRef = useRef(true);\n    const solvedOcpStateRef = useRef(false);\n\n    const loadTrailRef = useRef({\"data\": new Array(trail_length), \"index\": 0});\n\n    const anim_part1 = useRef(true);\n    const anim_part2 = useRef(true);\n    const animationRef = useRef(true);\n    const anim_tail = useRef(true);\n\n    const measLoadRef = useRef(true);\n\n    const getOcpState = () => {\n      let obj_pos = convertCoordinatesFromDOM(obs1.x, obs1.y);\n      let obs1_local = {...obs1, x: obj_pos[0], y: obj_pos[1]};\n      obj_pos = convertCoordinatesFromDOM(obs2.x, obs2.y);\n      let obs2_local = {...obs2, x: obj_pos[0], y: obj_pos[1]};\n\n      return {tunnel : tunnel,\n              A: convertCoordinatesFromDOM(A[0], A[1]),\n              B: convertCoordinatesFromDOM(B[0], B[1]),\n              C: convertCoordinatesFromDOM(C[0], C[1]),\n              D: convertCoordinatesFromDOM(D[0], D[1]),\n              NoSwing: enableNoSwing,\n              ObstacleAvoidance: enableObstacleAvoidance,\n              obs1: obs1_local,\n              obs2: obs2_local,\n              trackingMode: trackingMode,\n              trackingWeight: trackingWeight,\n              maxAngle: maxAngle,\n              init: init,\n              problemMode: problemMode\n            };\n    }\n\n    const [indicators, setIndicators] = useState({\n      transit_time: 0,\n      cpu_time: 0,\n    });\n\n    const [pythonCode, setPythonCode] = useState(\"\");\n    const [showPythonCode, setShowPythonCode] = useState(true);\n\n    const [nightMode, setNightMode] = useState(false);\n    const [expertMode, setExpertMode] = useState(false);\n    \n\n    useEffect (() => {\n      currentOcpStateRef.current = getOcpState();\n      if (!isUptoDate()) {\n        if (solverState!==SOLVER_INACTIVE) setSolverState(SOLVER_WAIT);\n      }\n    }, [tunnel,A,B,C,D,enableNoSwing,enableObstacleAvoidance,obs1,obs2,trackingMode,trackingWeight,maxAngle,init,problemMode]);\n\n    const isUptoDate = () => {\n      return JSON.stringify(currentOcpStateRef.current) === JSON.stringify(solvedOcpStateRef.current);\n    }\n\n  // State for chart data management\n    let tmp_dataScatter = {\n      labels: ['Scatter'],\n      datasets: [\n        {\n          label: 'My dataset',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: [\n            { x: 0, y: 0 },\n            { x: 20, y: 0 },\n            { x: 40, y: 0 },\n            { x: 60, y: 0 },\n            { x: 80, y: 0 },\n            { x: 100, y: 0 },\n            { x: 200, y: 0 },\n          ],\n          showLine: true\n        }\n      ]\n    };\n    const [dataScatter, setDataScatter] = useState( tmp_dataScatter );\n    const [dataScatter2, setDataScatter2] = useState( tmp_dataScatter );\n    const [dataScatter3, setDataScatter3] = useState( tmp_dataScatter );\n\n  // ---------------------------------------------------------------------------\n  // Helper methods ------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n    const updateSwing = () => {\n        setEnableNoSwing(!enableNoSwing);\n    }\n\n    const updateObstacleSwitch = () => {\n        setEnableObstacleAvoidance(!enableObstacleAvoidance);\n\n        if (enableObstacleAvoidance){\n          setObs1({...obs1, isVisible: false});\n          setObs2({...obs2, isVisible: false});\n        }\n        else {\n          if (obsCount === 1){\n            setObs1({...obs1, isVisible: true});\n          }\n          if (obsCount === 2){\n            setObs1({...obs1, isVisible: true});\n            setObs2({...obs2, isVisible: true});\n          }\n        }\n    }\n\n    const updateObstacleCounter = (op) => {\n      if (op === \"up\") {\n        if (obsCount < 2){ // Max 2 obstacles\n          if (obsCount === 0){\n            let obs_pos = convertCoordinatesToDOM(0.25,-0.9);\n            setObs1({x: obs_pos[0], y: obs_pos[1], radius: obs1.radius, isVisible: true});\n          }\n          if (obsCount === 1){\n            let obs_pos = convertCoordinatesToDOM(0.375,-0.9);\n            setObs2({x: obs_pos[0], y: obs_pos[1], radius: obs1.radius, isVisible: true});\n          }\n          setObsCount(obsCount+1);\n        }\n      }\n      else if (op === \"down\"){\n        if (obsCount > 0){\n          if (obsCount === 1){\n            setObs1({...obs1, isVisible: false});\n          }\n          if (obsCount === 2){\n            setObs2({...obs2, isVisible: false});\n          }\n          setObsCount(obsCount-1);\n        }\n      }\n    };\n\n    const limitObjectsInCanvas = (pos) => {\n      var x, y;\n      if (pos.y < craneArea.y+craneArea.borderY) { y = craneArea.y+craneArea.borderY; }\n      else if (pos.y > craneArea.y+craneArea.height-5*craneArea.borderY) { y = craneArea.y+craneArea.height-5*craneArea.borderY; }\n      else {y = pos.y;}\n\n      // if (pos.x < craneArea.x-13*craneArea.borderX) { x = craneArea.x-13*craneArea.borderX; }\n      // else if (pos.x > craneArea.x+craneArea.width+13*craneArea.borderX) { x = craneArea.x+craneArea.width+13*craneArea.borderX; }\n      if (pos.x < 17) { x = 17; }\n      else if (pos.x > stageSize.width-17) { x = stageSize.width-17; }\n      else {x = pos.x;}\n\n      return { x: x, y: y };\n    }\n\n    function convertCoordinatesFromDOM(x,y) {\n      y = -(y-craneArea.borderY-craneArea.y)*craneRealHeight/stageSize.height;\n      x = (x-craneArea.borderX-craneArea.x)*craneRealWidth/(stageSize.height*craneRealWidth/craneRealHeight);\n      return [x, y]\n    }\n\n    function convertCoordinatesToDOM(x,y) {\n      // x = x*craneRealWidth/stageSize.width;\n      x = (x*(stageSize.height*craneRealWidth/craneRealHeight)/craneRealWidth)+craneArea.x+craneArea.borderX;\n      y = (-y*stageSize.height/craneRealHeight)+craneArea.y+craneArea.borderY;\n      return [x, y]\n    }\n\n\n    function updatePlotData(plot,x,y) {\n        var plot_data;\n        if (plot === 1){plot_data = dataScatter;}\n        if (plot === 2){plot_data = dataScatter2;}\n        if (plot === 3){plot_data = dataScatter3;}\n\n        var oldDataSet = plot_data.datasets[0];\n        var newData = [];\n\n        for(var i=0; i<y.length; i++){\n          newData.push({ x: i, y: y[i] });\n        }\n\n        // console.log(\"The type is: %d\",oldMinX);\n\n        var newDataSet = {\n          ...oldDataSet\n        };\n\n        newDataSet.data = newData;\n\n        var newState = {\n          ...plot_data,\n          datasets: [newDataSet]\n        };\n\n        if (plot === 1){setDataScatter(newState);}\n        if (plot === 2){setDataScatter2(newState);}\n        if (plot === 3){setDataScatter3(newState);}\n    }\n\n    const distanceToDOM = (d) => {\n      return d*craneArea.width/craneRealWidth;\n    }\n\n    const updateReference = (reference) => {\n      let referenceDOM = [];\n      for(var i=0; i<reference.length; i=i+2){\n        let p = convertCoordinatesToDOM(reference[i],reference[i+1])\n        referenceDOM.push(p[0]);\n        referenceDOM.push(p[1]);\n      }\n      setLine({points : referenceDOM});\n      setLineTunnel({points : referenceDOM});\n    }\n\n    const updateTrajectory = (traj) => {\n      let trajDOM = [];\n      for(var i=0; i<traj.length; i=i+2){\n        let p = convertCoordinatesToDOM(traj[i],traj[i+1])\n        trajDOM.push(p[0]);\n        trajDOM.push(p[1]);\n      }\n      setLineTraj({points : trajDOM});\n    }\n\n    const showCode = () => {\n      setShowPythonCode(!showPythonCode);\n      // resizeCanvas(!pythonCode.show);\n    }\n\n    // const resizeCanvas = (showPython) => {\n    //   if (showPython) {\n    //     let craneWidth = stageSize.height*craneRealWidth/craneRealHeight;\n    //     let craneX = 10;\n    //     setCraneArea({...craneArea, x: craneX, width: craneWidth});\n    //   }\n    //   else {\n    //     let craneWidth = stageSize.height*craneRealWidth/craneRealHeight;\n    //     let craneX = Math.floor(stageSize.width-craneWidth)/2;\n    //     setCraneArea({...craneArea, x: craneX, width: craneWidth});\n    //   }\n    // }\n\n    const updateCanvasElements = (res, currentSolvedOCP) => {\n      if (currentSolvedOCP.problemMode==='optimal' && currentSolvedOCP.trackingMode!=='none') {\n        updateReference(res.data.reference);\n      }\n      \n      updateTrajectory(res.data.traj);\n\n      updatePlotData(1, null, res.data.alpha);\n      updatePlotData(2, null, res.data.x);\n      updatePlotData(3, null, res.data.h);\n    }\n\n\n    const ringAppend = (d,a) => {\n      // Append elements to a ringbuffer\n      let N = d.data.length;\n      for (var i=0;i<a.length;i++) {\n        d.data[d.index] = a[i];\n        d.index = (d.index+1) % N;\n      }\n    };\n    const ringFlat = (d) => {\n      let N = d.data.length;\n      return d.data.slice(d.index, N).concat(d.data.slice(0, d.index));\n    };\n    const ringTail = (d,n) => {\n      let N = d.data.length;\n      let stop = d.index;\n      let start = (stop-n+N) % N;\n      if (start<stop) {\n        return d.data.slice(start,stop);\n      } else {\n        return d.data.slice(start, N).concat(d.data.slice(0, stop));\n      }\n    };\n\n  // ---------------------------------------------------------------------------\n  // For responsiveness --------------------------------------------------------\n  // ---------------------------------------------------------------------------\n    const checkSize = () => {\n      let width = document.getElementById('stage_container').clientWidth;\n      let height = document.getElementById('stage_container').clientHeight;\n      setStageSize({width: width, height: height});\n\n      const craneWidth = height*craneRealWidth/craneRealHeight;\n      let craneX = Math.floor(width-craneWidth)/2;\n      let craneY = 75;\n      setCraneArea({...craneArea, x: craneX, y: craneY, width: craneWidth, height: height});\n      // setCircle1({x: convertCoordinatesToDOM(0,-0.9)[0], y: convertCoordinatesToDOM(0,-0.9)[1]});\n\n    };\n\n\n  useEffect (() => {\n    // checkSize();\n\n    // fetch('/poll').then(response => {\n    //   var reader = response.body.getReader();\n    //   const decoder = new TextDecoder();\n\n    //   return pump();\n\n    //   function pump() {\n    //     return reader.read().then(consume);\n    //   }\n    //   function consume(result) {\n    //       if (result.value != null){\n\n    //         // let data = new Float64Array(result.value.buffer);\n    //         let data_0 = new DataView(result.value.buffer, 0);\n    //         let data = data_0.getFloat64();\n    //         // let data = Array.prototype.slice.call(result.value.buffer, 0);\n    //         // If consumption is too slow, data length will become a multiple of 3\n    //         let h = data[data.length-3];\n    //         let x = data[data.length-2];\n    //         let alpha = data[data.length-1];\n\n    //         let p = convertCoordinatesToDOM(x+h*Math.sin(alpha), -h*Math.cos(alpha));\n\n    //         ringAppend(loadTrailRef.current,p);\n\n    //       }\n    //       return pump();\n    //   }\n    // });\n\n    window.addEventListener('keydown', e => {if  (e.which===cameraControlKey) setEnableCameraControls(true);});\n    window.addEventListener('keyup',  e => {if  (e.which===cameraControlKey) setEnableCameraControls(false);});\n\n  }, []);\n\n  useEffect (() => {\n    updateDOMcoordinates();\n  }, [craneArea]);\n\n  const updateDOMcoordinates = () => {\n    setA(convertCoordinatesToDOM(A_start[0],A_start[1]));\n    setB(convertCoordinatesToDOM(B_start[0],B_start[1]));\n    setC(convertCoordinatesToDOM(C_start[0],C_start[1]));\n    setD(convertCoordinatesToDOM(D_start[0],D_start[1]));\n    let obs_pos = convertCoordinatesToDOM(obs1_center_start[0],obs1_center_start[1]);\n    setObs1({x: obs_pos[0], y: obs_pos[1], radius: obs1_radius_start, isVisible: false});\n\n\n\n\n\n    let left = convertCoordinatesToDOM(lbx,0);\n    let right = convertCoordinatesToDOM(ubx,0);\n    setBoundaries([left[0],right[0],right[1]]);\n\n    left = convertCoordinatesToDOM(lbx,-lbh);\n    right = convertCoordinatesToDOM(ubx,-ubh);\n    let area = {x: left[0], y: left[1], width: Math.abs(right[0]-left[0]), height: Math.abs(right[1]-left[1])};\n    console.log(area)\n    setMainArea(area);\n  }\n\n  // ---------------------------------------------------------------------------\n  // Communication with Cherrypy server ----------------------------------------\n  // ---------------------------------------------------------------------------\n\n  const swap_AB = () => {\n    setA(B);\n    setB(A);\n    setC(D);\n    setD(C);\n  }\n\n  async function trigger_run(label, args) {\n    axios.post(\"trigger_run\" , {})\n\n    window.setTimeout(swap_AB,5000);\n  }\n\n  async function get_ocp_result() {\n    if (!isUptoDate()) {\n      solvedOcpStateRef.current = currentOcpStateRef.current;\n\n      axios.post(\"get_ocp_result\", solvedOcpStateRef.current)\n      .then(res => {\n\n        let result = res.data;\n\n        let state;\n        if (result.success) {\n          updateCanvasElements(res, solvedOcpStateRef.current);\n\n          // https://github.com/konvajs/react-konva/issues/243\n\n          animationRef.current = new Konva.Animation(frame => {\n            let t_start = 0.01;\n            let t_stop = 1;\n            let t = (frame.time/1000) % (result.T[0]+t_start+t_stop);\n            let N = result.traj.length/2;\n            let index = (t-t_start)/result.T[0]*N;\n            index = Math.round(Math.max(Math.min(index,N-1),0));\n            let p_load = convertCoordinatesToDOM(result.traj[2*index], result.traj[2*index+1]);\n            let p_top = convertCoordinatesToDOM(result.trajcart[2*index], result.trajcart[2*index+1]);\n            anim_part1.current.points([p_load[0],p_load[1],p_top[0],p_top[1]]);\n            anim_part2.current.x(p_top[0]-cart_width/2);\n            anim_part2.current.y(p_top[1]-10);\n            let opacity = (Math.min(t/t_start,1)-Math.max((t-(result.T[0]+t_start))/t_stop,0));\n            anim_part1.current.opacity(opacity);\n            anim_part2.current.opacity(opacity);\n\n            // let p = ringTail(loadTrailRef.current,2);\n            // if (p[0]!=undefined) {\n            //   measLoadRef.current.x(p[0]);\n            //   measLoadRef.current.y(p[1]);\n            // }\n            // anim_tail.current.points(ringFlat(loadTrailRef.current));\n\n            let p = ringTail(loadTrailRef.current,trail_length);\n            if (p[0]!==undefined) {\n              measLoadRef.current.x(p[p.length-2]);\n              measLoadRef.current.y(p[p.length-1]);\n              anim_tail.current.points(p);\n            }\n\n          }, anim_part1.current.getLayer());\n\n          animationRef.current.start();\n          setIndicators({cpu_time: result.cpu_time, transit_time: result.T});\n\n          state = SOLVER_SUCCESS;\n        } else {\n           if (result.status===\"Maximum_CpuTime_Exceeded\") {\n             state = SOLVER_TIMEOUT;\n           } else if (result.status===\"Infeasible_Problem_Detected\") {\n             state = SOLVER_INFEASIBLE;\n           } else {\n             state = SOLVER_FAIL;\n           }\n        }\n\n        setPythonCode(result.code);\n\n        if (isUptoDate()) {\n          setSolverState(state);\n        }\n\n        window.setTimeout(get_ocp_result,30);\n      })\n      .catch((error) => {\n        console.log(error);\n        if (isUptoDate()) {\n          setSolverState(SOLVER_ERROR);\n        }\n        window.setTimeout(get_ocp_result,30);\n\n      });\n    } else {\n      window.setTimeout(get_ocp_result,30);\n    }\n  }\n  \n  // ---------------------------------------------------------------------------\n  // Render --------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n  return (\n\n    <Container fluid id=\"container\" className={!nightMode ? \"home_container\" : \"home_container_night\"}>\n      {/*<Row className=\"justify-content-center\">\n        <h2 className=\"justify-content-center\">GUI &rarr; <img\n                alt=\"rockit\"\n                src={rockit_logo}\n                width=\"200\"\n              /> code &rarr; optimized motion</h2>\n\n        <div className=\"code-enable-switch\">\n          <Form className=\"demo-sliders\">\n            <Form.Row >\n              <Form.Label style={{fontSize:16, fontWeight:500}} className=\"noselect\">Show code</Form.Label>\n              <Form.Check\n                className=\"ml-1 code-check\"\n                defaultChecked={showPythonCode}\n                type=\"switch\"\n                label=\"\"\n                id=\"code-switch4\"\n                checked={showPythonCode}\n                onChange={showCode}\n              />\n            </Form.Row>\n          </Form>\n        </div>\n      </Row>*/}\n\n      <Row>\n        <Col xs={2}>\n          <Row className=\"column-title justify-content-center\" >\n            {/* <h2 className=\"justify-content-center\" style={{textAlign: 'center', height: \"1.8em\"}}>1. GUI</h2> */}\n            <h2 className=\"justify-content-center\" style={{textAlign: 'center'}}>{problemMode==='optimal' ? '1.' : ''} GUI</h2>\n          </Row>\n\n          <Card className=\"mb-4 shadow rounded\">\n            <Card.Body>\n              <Row className=\"justify-content-center d-flex align-items-center\">\n                <Button variant=\"primary\" onClick={get_ocp_result} >Start</Button>{' '}\n                \n                <Button variant=\"danger\" onClick={checkSize} className=\"ml-4\">Stop</Button>{' '}\n\n                <Button variant=\"primary\" onClick={trigger_run} className=\"ml-4\">Run!</Button>{' '}\n                \n              </Row>\n            </Card.Body>\n          </Card>\n\n          <Card className=\"mb-4 shadow rounded\">\n            <Card.Body>\n              <Row className=\"justify-content-center\">\n                <h5 className=\"noselect\">Problem settings</h5>\n              </Row>\n              <Row className=\"justify-content-center\">\n                <Form className=\"demo-sliders\">\n\n\n                  <Form.Row className=\"mt-1\">\n                    <Form.Label style={{fontSize:14, fontWeight:500}} className=\"noselect\">Approach</Form.Label>\n                  </Form.Row>\n                  <Form.Row style={{marginTop:\"-0.5rem\"}} className=\"justify-content-center\">\n                    <ToggleButtonGroup \n                      type=\"radio\" \n                      defaultValue={problemMode} \n                      name='groupProblem' \n                      onChange={ (value) => setProblemMode(value)}\n                      size=\"sm\"\n                    >\n                      <ToggleButton variant=\"secondary\" value={'naive'}>Naive</ToggleButton>\n                      <ToggleButton variant=\"secondary\" value={'naive_slow'}>Naive (slow)</ToggleButton>\n                      <ToggleButton variant=\"secondary\" value={'optimal'}>Optimal</ToggleButton>\n                    </ToggleButtonGroup>\n                  </Form.Row>\n\n                  {/*<Form.Row className=\"mt-2\">\n                    <Form.Label style={{fontSize:14, fontWeight:500}} className=\"noselect\">End in stand-still</Form.Label>\n                    <Form.Check\n                      className=\"ml-1\"\n                      defaultChecked={enableNoSwing}\n                      type=\"switch\"\n                      label=\"\"\n                      id=\"custom-switch2\"\n                      onChange={updateSwing}\n                    />\n                  </Form.Row>*/}\n\n                  {problemMode==='optimal' &&\n                  <Form.Row className=\"mt-1\">\n                    <Form.Label style={{fontSize:14, fontWeight:500}} className=\"noselect\">Reference tracking?</Form.Label>\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' &&\n                  <Form.Row style={{marginTop:\"-0.5rem\"}} className=\"justify-content-center\">\n                    <ToggleButtonGroup \n                      type=\"radio\" \n                      defaultValue={trackingMode} \n                      name='group1' \n                      onChange={ (value) => setTrackingMode(value)}\n                      size=\"sm\"\n                    >\n                      <ToggleButton variant=\"secondary\" value={'none'}>None</ToggleButton>\n                      <ToggleButton variant=\"secondary\" value={'objective'}>Objective</ToggleButton>\n                      <ToggleButton variant=\"secondary\" value={'constraint'}>Constraint</ToggleButton>\n                    </ToggleButtonGroup>\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && trackingMode!=='none' &&\n                  <Form.Row className=\"mt-1\">\n                    (<i>ctrl</i>&nbsp; to change shape)\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && trackingMode==='objective' &&\n                  <Form.Row className=\"mt-3\">\n                    <Form.Label\n                      style={{\n                        fontSize:14,\n                        fontWeight:500\n                      }}\n                      className=\"noselect\"\n                    >\n                      Tracking weight:\n                    </Form.Label>\n                    <Form.Label style={{fontSize:14}} className=\"ml-1 noselect\">  w={(+trackingWeight).toFixed(2)} </Form.Label>\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && trackingMode==='objective' &&\n                  <Form.Row style={{marginTop:\"-0.5rem\"}}>\n                    <Form.Control\n                      type=\"range\"\n                      value={Math.log10(trackingWeight)}\n                      min={-2}\n                      max={4}\n                      step={0.01}\n                      onChange={e => setTrackingWeight(Math.pow(10,e.target.value))}\n                    />\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && trackingMode==='constraint' &&\n                  <Form.Row className=\"mt-3\">\n                    <Form.Label\n                      style={{\n                        fontSize:14,\n                        fontWeight:500\n                      }}\n                      className=\"noselect\"\n                    >\n                      Tunnel radius:\n                    </Form.Label>\n                    <Form.Label style={{fontSize:14}} className=\"ml-1 noselect\">  r={tunnel.radius} m </Form.Label>\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && trackingMode==='constraint' &&\n                  <Form.Row style={{marginTop:\"-0.5rem\"}}>\n                    <Form.Control\n                      type=\"range\"\n                      // className=\"custom-range\"\n                      value={tunnel.radius}\n                      min={0.005}\n                      max={0.2}\n                      step={0.001}\n                      onChange={e => setTunnel({...tunnel, radius: e.target.value})}\n                    />\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' &&\n                  <Form.Row className=\"mt-3\">\n                    <Form.Label style={{fontSize:14, fontWeight:500}} className=\"noselect\">Obstacle avoidance </Form.Label>\n                    <Form.Check\n                      className=\"ml-1\"\n                      defaultChecked={enableObstacleAvoidance}\n                      type=\"switch\"\n                      id=\"custom-switch\"\n                      label=\"\"\n                      onChange={updateObstacleSwitch}\n                    />\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && enableObstacleAvoidance &&\n                  <Form.Row className=\"mt-2\">\n                    <Form.Label\n                      style={{\n                        fontSize:14,\n                        fontWeight:500,\n                        color: !enableObstacleAvoidance ? \"gray\":\"black\"\n                      }}\n                      className=\"noselect\"\n                    >\n                      Obstacle width:\n                    </Form.Label>\n                    <Form.Label style={{fontSize:14, color: !enableObstacleAvoidance ? \"gray\":\"black\"}} className=\"ml-1 noselect\">  R={obs1.radius} m </Form.Label>\n                  </Form.Row>\n                  }\n                  {problemMode==='optimal' && enableObstacleAvoidance &&\n                  <Form.Row style={{marginTop:\"-0.5rem\"}}>\n                    <Form.Control\n                      type=\"range\"\n                      // className=\"custom-range\"\n                      value={obs1.radius}\n                      min={0.05}\n                      max={0.2}\n                      step={0.01}\n                      onChange={e => setObs1({...obs1, radius: e.target.value})}\n                    />\n                  </Form.Row>\n                  }\n\n                  {/*<Form.Row className=\"mt-2\">\n                    <Form.Label style={{fontSize:14, fontWeight:500}} className=\"noselect\">Max. swing angle: </Form.Label><Form.Label style={{fontSize:14}} className=\"ml-1 noselect\"> α_lim={maxAngle} rad </Form.Label>\n                  </Form.Row>\n                  <Form.Row style={{marginTop:\"-0.5rem\"}}>\n                    <Form.Control\n                      type=\"range\"\n                      value={maxAngle}\n                      min={0}\n                      max={1}\n                      step={0.01}\n                      onChange={e => setMaxAngle(e.target.value)}\n                    />\n                  </Form.Row>*/}\n                  {/*\n                  <Form.Row className=\"mt-2\">\n                    <Form.Label style={{fontSize:14, fontWeight:500}} className=\"noselect\">Init: </Form.Label><Form.Label style={{fontSize:14}} className=\"ml-1 noselect\"> {init} </Form.Label>\n                  </Form.Row>\n                  <Form.Row style={{marginTop:\"-0.5rem\"}}>\n                    <Form.Control\n                      type=\"range\"\n                      value={init}\n                      min={-1}\n                      max={1}\n                      step={0.01}\n                      onChange={e => setInit(e.target.value)}\n                    />\n                  </Form.Row>\n                  */}\n                </Form>\n              </Row>\n            </Card.Body>\n          </Card>\n\n          {/*<Card className=\"mb-4 shadow rounded\">\n            <Card.Body>\n              <Row className=\"justify-content-center\">\n                <h5 className=\"noselect\" style={{color: !enableObstacleAvoidance ? \"gray\":\"black\"}}>Obstacles</h5>\n              </Row>\n\n              <Row className=\"mt-2 justify-content-center\">\n                <Button variant=\"info\" className=\"btn-circle btn-circle-md\" onClick={() => updateObstacleCounter(\"down\")} disabled={!enableObstacleAvoidance}>\n                  <i className=\"fa fa-minus\"></i>\n                </Button>{' '}\n\n                <h1 className=\"ml-4 mr-4 noselect\" style={{color: !enableObstacleAvoidance ? \"gray\":\"black\"}}> {obsCount} </h1>\n\n                <Button variant=\"info\" className=\"btn-circle btn-circle-md\" onClick={() => updateObstacleCounter(\"up\")} disabled={!enableObstacleAvoidance}>\n                  <i className=\"fa fa-plus\"></i>\n                </Button>{' '}\n              </Row>\n\n            </Card.Body>\n          </Card>\n          */}\n\n\n          {/* <Card className=\"mb-4 shadow rounded\">\n            <Card.Body>\n              <Row className=\"justify-content-center\">\n                <Form>\n                  <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Label>Debug Console</Form.Label>\n                    <Form.Control as=\"textarea\" style={{fontSize: 12}} value={consoleLog} readOnly size=\"sm\" rows={4} cols={30}/>\n                  </Form.Group>\n                </Form>\n              </Row>\n            </Card.Body>\n          </Card> */}\n\n        </Col>\n\n        <Col xs={3}>\n\n          <Row className=\"column-title justify-content-center\" >\n            {problemMode==='optimal' &&\n            <h2 className=\"justify-content-center\" style={{textAlign: 'center'}}>\n              2. <Image src={rockit_logo} alt=\"rockit\" fluid width=\"40%\" /> code\n            </h2>\n            }\n          </Row>\n\n          \n            {problemMode==='optimal' && !showPythonCode &&\n              <>\n              <Card className=\"mb-4 plot_chart shadow rounded\">\n                <Card.Body>\n                  <Scatter\n                    data={dataScatter}\n                    options={{\n                      responsive: true,\n                      legend:{ display: false},\n                      title: {\n                        display: true,\n                        text: 'Crane angle position [rad]'\n                      },\n                      tooltips: {\n                        enabled: false\n                      },\n                    }}\n                  />\n                </Card.Body>\n              </Card>\n\n              <Card className=\"mb-4 plot_chart shadow rounded\">\n                <Card.Body>\n                  <Scatter\n                    data={dataScatter2}\n                    options={{\n                      responsive: true,\n                      legend:{ display: false},\n                      title: {\n                        display: true,\n                        text: 'Cart position [m]'\n                      },\n                      tooltips: {\n                        enabled: false\n                      },\n                    }}\n                  />\n                </Card.Body>\n              </Card>\n\n              <Card className=\"mb-4 plot_chart shadow rounded\">\n                <Card.Body>\n                  <Scatter\n                    data={dataScatter3}\n                    options={{\n                      responsive: true,\n                      legend:{ display: false},\n                      title: {\n                        display: true,\n                        text: 'Hoist length [m]'\n                      },\n                      tooltips: {\n                        enabled: false\n                      },\n                    }}\n                  />\n                </Card.Body>\n              </Card>\n              </>\n            }\n            {problemMode==='optimal' && showPythonCode &&\n              <>\n              <div className=\"code_container\" >\n                <SyntaxHighlighter \n                  language=\"python\" \n                  style={nightMode ? materialDark : vs} \n                  className=\"code-highlighter scrollable\" \n                  showLineNumbers={false}\n                  customStyle={!nightMode ? { fontSize: \"1.15em\", lineHeight: \"1.1\" } : { fontSize: \"0.83em\", lineHeight: \"1\" }}\n                >\n                  {pythonCode}\n                </SyntaxHighlighter>\n                { expertMode &&\n                  <div className=\"nightmode-button\">\n                    <Button variant={nightMode ? \"light\":\"dark\"} className=\"btn-circle btn-circle-sm\" onClick={() => setNightMode(!nightMode)}>\n                      <i className={nightMode ? \"fa fa-sun-o\" : \"fa fa-moon-o\"}></i>\n                    </Button>{' '}\n                  </div>\n                }\n              </div>\n\n              </>\n            }\n          \n        </Col>\n\n        <Col xs={7}>\n\n          <Row className=\"column-title justify-content-center\" >\n            <h2 className=\"justify-content-center\" style={{textAlign: 'center'}}>{problemMode==='optimal' ? '3. Time-optimal motion plan' : 'Motion plan'} A&rarr;B</h2>\n          </Row>\n\n          <Card border=\"light\" className=\"shadow rounded stageContainer\" id=\"stage_container\">\n\n              {/* <div width={stageSize.width} height={stageSize.height}> */}\n              <div className=\"sim_stage\">\n                {/* <span style={{fontSize:100, fontWeight:500}}>HolaAAAAA</span> */}\n                <Global styles={globalStyles} />\n                <WorldViewer cameraControlKey={enableCameraControls}/>\n              </div>\n           \n              <Card className=\"indicators-box shadow rounded\">\n                <Card.Body style={{marginTop:\"-0.75%\"}}>\n                    <Row className=\"ml-2 mr-2\">\n                      <Col sm={9}>\n                        <Row>\n                          <span style={{fontSize:14, fontWeight:500}}>{problemMode==='optimal'? 'Optimized transit time' : 'Transit time'} (lower = better performance): </span>\n                        </Row>\n                        <Row>\n                          <ProgressBar \n                            style={{width:\"90%\", fontWeight:500, fontSize:18, height: \"1.3em\"}} \n                            min={0}\n                            max={5}\n                            now={Number(indicators.transit_time).toFixed(3)} \n                            label={`${Number(indicators.transit_time).toFixed(3)} s`} \n                            variant=\"success\"\n                          />\n                        </Row>\n                        \n                      </Col>\n\n                      <Col sm={1}>\n                        <Row className=\"justify-align-center traffic-light\">\n                          <span style={{fontSize:14, fontWeight:500}}>CPU time: </span>\n                        </Row>\n                        <Row>\n                          <span className=\"ml-1\" style={{fontSize:14}}> {Number(indicators.cpu_time).toFixed(3)} s</span>\n                        </Row>\n                      </Col>\n\n                      <Col sm={2}>\n                        <Row className=\"justify-align-center traffic-light\">\n                          <span style={{fontSize:14, fontWeight:500}}>solver status: </span>\n                        </Row>\n                        <Row>\n                          {solverState===SOLVER_WAIT &&\n                            <Spinner animation=\"border\" role=\"status\" variant=\"info\" size=\"sm\" className=\"ml-1 mt-1\">\n                              <span className=\"sr-only\">Loading...</span>\n                            </Spinner>\n                          }\n                          {solverState!==SOLVER_WAIT &&\n                          <span \n                            className=\"dot-indicator\" \n                            style={{\n                              backgroundColor: solverColor[solverState] \n                            }}\n                          />\n                          }\n                          <span className=\"ml-1 noselect\" style={{fontSize:14}}>\n                            {solverLabel[solverState]}\n                          </span>\n                        </Row>\n                      </Col>\n                    </Row>                 \n                </Card.Body>\n              </Card>\n\n          </Card>\n        </Col>        \n\n      </Row>\n\n    </Container>\n  );\n};\n\nexport default ControlPanel;\n","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/context/GUIContext.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/WorldViewer.js",["107","108","109","110","111","112","113"],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/index.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Lights.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/CameraControl.js",["114"],"// import { useThree } from \"@react-three/fiber\";\nimport { useState } from 'react';\nimport { extend, useThree } from \"@react-three/fiber\";\n// import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// import { OrbitControls } from \"@react-three/drei\";\nimport { OrbitControls } from \"three-stdlib\";\nimport React from \"react\";\n\nextend({ OrbitControls });\n\nexport const CameraControl = (props) => {\n  let { enable } = props;\n  const { camera, gl } = useThree();\n\n  return (\n    <orbitControls\n      enabled={enable}\n      // enableZoom={false}\n      // maxPolarAngle={Math.PI / 2 - 0.1}\n      // minPolarAngle={Math.PI / 6}\n      args={[camera, gl.domElement]}\n    />\n  );\n};\n\n// export default Controls;\n","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Plane.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Ball.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/RobotVisual.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Box.js",[],"/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Bin.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"import React, {\n    Suspense,\n    createRef,\n    createContext,\n    useContext,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState\n  } from \"react\";\n\n  import * as THREE from \"three\";\n  \n  import { extend } from \"@react-three/fiber\";\n  \n  import { Canvas, useLoader, useFrame, useThree } from \"@react-three/fiber\";\n  \n  import { useTexture } from \"@react-three/drei\";\n  \n  // import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n  import { OrbitControls } from \"three-stdlib\";\n  import { GLTFLoader } from \"three-stdlib/loaders/GLTFLoader\";\n  import {\n    BoxGeometry,\n    MeshLambertMaterial,\n    Shape,\n    geometry,\n    ShapeGeometry,\n    Mesh\n  } from \"three\";\n  import {\n    Physics,\n    useBox,\n    useCompoundBody,\n    useCylinder,\n    useSphere,\n    usePlane,\n    useConeTwistConstraint,\n    usePointToPointConstraint\n  } from \"@react-three/cannon\";\n  \n  //// Example: https://codesandbox.io/s/ragdoll-physics-forked-bntr9?file=/src/index.js\n  // export const Bin = (props) => {\n  //   const mesh = useRef();\n  //   const [state, setState] = useState({ isHovered: false, isActive: false });\n  \n  //   return (\n  //     <mesh\n  //       {...props}\n  //       ref={mesh}\n  //       scale={state.isHovered ? [1.3, 1.3, 1.3] : [1, 1, 1]}\n  //       onClick={(e) => setState({ ...state, isActive: !state.isActive })}\n  //       onPointerOver={(e) => setState({ ...state, isHovered: true })}\n  //       onPointerOut={(e) => setState({ ...state, isHovered: false })}\n  //     >\n  //       <boxBufferGeometry args={props.size} openEnded />\n  //       <meshStandardMaterial color={state.isActive ? \"#820263\" : \"#D90368\"} />\n  //     </mesh>\n  //   );\n  // };\n  \n  // const Plane = React.forwardRef(\n  //   (\n  //     {\n  //       children,\n  //       transparent = false,\n  //       opacity = 1,\n  //       color = \"white\",\n  //       args = [1, 1, 1],\n  //       ...props\n  //     },\n  //     ref\n  //   ) => {\n  //     return (\n  //       <mesh receiveShadow castShadow ref={ref} {...props}>\n  //         <boxBufferGeometry args={args} />\n  //         <meshStandardMaterial\n  //           color={color}\n  //           transparent={transparent}\n  //           opacity={opacity}\n  //         />\n  //         {children}\n  //       </mesh>\n  //     );\n  //   }\n  // );\n\n// function CompoundBody(props) {\n//     const [ref] = useCompoundBody(() => ({\n//       mass: 12,\n//       position: [1, 1, 1],\n//       ...props,\n//       shapes: [\n//         { type: 'Box', position: [0, 0, 0], rotation: [0, 0, 0], args: [0.5, 0.5, 0.5] },\n//         { type: 'Sphere', position: [1, 0, 0], rotation: [0, 0, 0], args: [0.65] },\n//       ],\n//     }))\n//     return (\n//       <group ref={ref}>\n//         <mesh castShadow>\n//           <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n//           <meshNormalMaterial attach=\"material\" />\n//         </mesh>\n//         <mesh castShadow position={[1, 0, 0]}>\n//           <sphereBufferGeometry attach=\"geometry\" args={[0.65, 16, 16]} />\n//           <meshNormalMaterial attach=\"material\" />\n//         </mesh>\n//       </group>\n//     )\n//   }\n\n  // function CompoundBody(props) {\n  //   const [ref] = useCompoundBody(() => ({\n  //     mass: 10,\n  //     position: [0, 0, 1],\n  //     ...props,\n  //     shapes: [\n  //       { type: 'Box', position: [0, 0, 0], rotation: [0, 0, 0], args: [0.5, 0.5, 0.5] },\n  //       { type: 'Box', position: [0, 0, 0], rotation: [0, 0, 0], args: [0.3, 0.23, 0.4] },\n  //     ],\n  //   }))\n  //   return (\n  //     <group ref={ref}>\n  //       <mesh castShadow>\n  //         <boxBufferGeometry attach=\"geometry\" args={[0.1, 0.23, 0.4]} />\n  //         <meshNormalMaterial attach=\"material\" />\n  //       </mesh>\n  //       <mesh castShadow>\n  //         <boxBufferGeometry attach=\"geometry\" args={[0.23, 0.1, 0.4]} />\n  //         <meshNormalMaterial attach=\"material\" />\n  //       </mesh>\n        \n  //     </group>\n  //   )\n  // }\n  \n  // export function OwnBin() {\n  //   const [seat] = useBox(() => ({\n  //     type: \"Static\",\n  //     position: [9, -0.8, 0],\n  //     args: [2.5, 0.25, 2.5]\n  //   }));\n  //   const [leg1] = useBox(() => ({\n  //     type: \"Static\",\n  //     position: [7.2, -3, 1.8],\n  //     args: [0.25, 2, 0.25]\n  //   }));\n  //   const [leg2] = useBox(() => ({\n  //     type: \"Static\",\n  //     position: [10.8, -3, 1.8],\n  //     args: [0.25, 2, 0.25]\n  //   }));\n  //   const [leg3] = useBox(() => ({\n  //     type: \"Static\",\n  //     position: [7.2, -3, -1.8],\n  //     args: [0.25, 2, 0.25]\n  //   }));\n  //   const [leg4] = useBox(() => ({\n  //     type: \"Static\",\n  //     position: [1.8, -3, -1.8],\n  //     args: [0.25, 2, 0.25]\n  //   }));\n  //   return (\n  //     <mesh position={[0,0,0]}>\n  //       <Plane scale={[5, 0.5, 5]} ref={seat} />\n  //       <Plane scale={[0.5, 4, 0.5]} ref={leg1} />\n  //       <Plane scale={[0.5, 4, 0.5]} ref={leg2} />\n  //       <Plane scale={[0.5, 4, 0.5]} ref={leg3} />\n  //       <Plane scale={[0.5, 4, 0.5]} ref={leg4} />\n  //     </mesh>\n  //   );\n  // }\n  \n// export function Bin2 () {\n//   const height = 0.23;\n//   // const geometry = new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded)\n//   return (\n//     <mesh position={[-1.2, height/2, 0.5]}>\n//       <cylinderBufferGeometry attach=\"geometry\" args={[0.3, 0.3, height, 4, 10, true]} />\n//       <meshNormalMaterial attach=\"material\" />\n//     </mesh>\n//   )\n// }\n\nfunction CompoundBin(props) {\n  // const {position, height, width, depth, thickness} = props;\n  // const { propOne, propTwo, children, ...props } = props;\n\n\n  const [ref] = useCompoundBody(() => ({\n    mass: 100,\n    type: 'Static',\n    // position: [props.position[0],0,0],\n    ...props,\n    shapes: [\n      { type: 'Box', position: [0, 0, 0], rotation: [0, 0, 0], args: [props.height, props.thickness, props.width] },\n      { type: 'Box', position: [0, (props.depth)/2, (props.width)/2], rotation: [-Math.PI/2, 0, 0], args: [props.height, props.thickness, props.depth] },\n      { type: 'Box', position: [0, (props.depth)/2, -1*(props.width)/2], rotation: [-Math.PI/2, 0, 0], args: [props.height, props.thickness, props.depth] },\n      { type: 'Box', position: [(props.height)/2, (props.depth)/2, 0], rotation: [-Math.PI/2, 0, -Math.PI/2], args: [props.width, props.thickness, props.depth] },\n      { type: 'Box', position: [-1*(props.height)/2, (props.depth)/2, 0], rotation: [-Math.PI/2, 0, -Math.PI/2], args: [props.width, props.thickness, props.depth] },\n    ],\n  }))\n  return (\n    <group ref={ref}>\n      <mesh castShadow position={[0, 0, 0]}>\n        <boxBufferGeometry attach=\"geometry\" args={[props.height, props.thickness, props.width]} />\n        {/* <meshNormalMaterial attach=\"material\" /> */}\n        <meshStandardMaterial attach=\"material\" color={props.color} opacity={props.opacity} transparent />\n      </mesh>\n      <mesh castShadow rotation={[-Math.PI/2, 0, 0]} position={[0, (props.depth)/2, (props.width)/2]}>\n        <boxBufferGeometry attach=\"geometry\" args={[props.height, props.thickness, props.depth]} />\n        <meshStandardMaterial attach=\"material\" color={props.color} opacity={props.opacity} transparent />\n      </mesh>\n      <mesh castShadow rotation={[-Math.PI/2, 0, 0]} position={[0, (props.depth)/2, -1*(props.width)/2]}>\n        <boxBufferGeometry attach=\"geometry\" args={[props.height, props.thickness, props.depth]} />\n        <meshStandardMaterial attach=\"material\" color={props.color} opacity={props.opacity} transparent />\n      </mesh>\n      <mesh castShadow rotation={[-Math.PI/2, 0, -Math.PI/2]} position={[(props.height)/2, (props.depth)/2, 0]}>\n        <boxBufferGeometry attach=\"geometry\" args={[props.width, props.thickness, props.depth]} />\n        <meshStandardMaterial attach=\"material\" color={props.color} opacity={props.opacity} transparent />\n      </mesh>\n      <mesh castShadow rotation={[-Math.PI/2, 0, -Math.PI/2]} position={[-1*(props.height)/2, (props.depth)/2, 0]}>\n        <boxBufferGeometry attach=\"geometry\" args={[props.width, props.thickness, props.depth]} />\n        <meshStandardMaterial attach=\"material\" color={props.color} opacity={props.opacity} transparent />\n      </mesh>\n    </group>\n  )\n}\n\n\nexport const Bin = (props) => {\n    // const transparent = false;\n    // const opacity = 1;\n    const depth = 0.20;\n    const width = 0.40;\n    const height = 0.30;\n    const thickness = 0.02;\n    // const {height, depth, width} = props.size;\n\n    return (\n      // <CompoundBin position={props.position} height={height} width={width} depth={depth} thickness={thickness} />\n      // <CompoundBin height={height} width={width} depth={depth} thickness={thickness} {...props} />\n      <CompoundBin height={height} width={width} depth={depth} thickness={thickness} {...props} />\n    );\n  }\n  ","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/Spline.js",["146","147","148","149"],"import * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useDrag } from '@use-gesture/react';\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\n\n// https://spectrum.chat/react-three-fiber/general/how-to-detect-neighboring-points-on-spline~7a86c45e-52de-406e-a87b-65a6f67fb9f7\n\n\nconst Point = React.memo(({ uuid, color, points, movePoint }) => {\n    const initialPosition = useRef(points[uuid]);\n    const mesh = useRef();\n    const position = useRef(initialPosition.current);\n  \n    useFrame(() => mesh.current.position.set(...position.current));\n    \n    // const bindDrag = useDrag(\n    //   ({ offset: [mx, my], event }) => {\n    //     if (event) event.stopPropagation();\n    //     position.current = [\n    //       initialPosition.current[0] + mx,\n    //       initialPosition.current[1] - my,\n    //       0\n    //     ];\n    //     movePoint(uuid, position.current);\n    //   },\n    //   { pointerEvents: true }\n    // );\n    const bindDrag = useDrag(\n        ({ movement: [mx, my, mz], event }) => {\n          if (event) event.stopPropagation();\n          position.current = [\n            initialPosition.current[0] + 0.001*mx,\n            initialPosition.current[1] - 0.001*my,\n            initialPosition.current[2]\n          ];\n          movePoint(uuid, position.current);\n        },\n        { pointerEvents: true }\n      );\n  \n    return (\n      <mesh ref={mesh} {...bindDrag()}>\n        <sphereBufferGeometry args={[0.005, 20, 20]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n    );\n  });\n  \n  function makeLine(geometryRef, points) {\n    var anchors = [];\n    for (let key in points) {\n      anchors.push(new THREE.Vector3(...points[key]));\n    }\n    const curve = new THREE.CatmullRomCurve3(anchors, false, \"catmullrom\");\n    const pts = curve.getPoints(50);\n    geometryRef.current.setFromPoints(pts);\n  }\n  \n  const Line = React.memo(\n    ({ color, points, idx, addIndex, plusLength, setPoints }) => {\n      const geometryRef = useRef();\n      const { mouse, viewport } = useThree();\n  \n      useEffect(() => {\n        makeLine(geometryRef, points);\n      }, [points]);\n  \n      return (\n        // <line onClick={onClick}>\n        <line>\n          <bufferGeometry attach=\"geometry\" ref={geometryRef} />\n          <lineBasicMaterial attach=\"material\" color={color} linewidth={3} />\n        </line>\n      );\n    }\n  );\n  \n  const Points = React.memo(({ color, points, length, movePoint }) => {\n    const [objects, setObjects] = useState([]);\n  \n    useEffect(() => {\n      var temp = [];\n      for (let key in points) {\n        temp.push(\n          <Point\n            key={key}\n            uuid={key}\n            color={color}\n            points={points}\n            movePoint={movePoint}\n          />\n        );\n      }\n      setObjects(temp);\n    }, [length]);\n  \n    return objects.length !== 0 ? (\n      <React.Fragment>{objects}</React.Fragment>\n    ) : null;\n  });\n  \n export const Spline = React.memo(({ pColor, pPoints }) => {\n    const [points, apiPoints] = useState(pPoints);\n    const [idx, apiIdx] = useState(Object.keys(pPoints).length + 1);\n    const [length, apiLength] = useState(Object.keys(pPoints).length);\n  \n    const movePoint = (uuid, point) => {\n      apiPoints(s => ({ ...s, [uuid]: point }));\n    };\n    const setPoints = points => {\n      apiPoints(s => points);\n    };\n    const addIndex = () => {\n      apiIdx(s => s + 1);\n    };\n    const plusLength = n => {\n      apiLength(s => s + 1);\n    };\n  \n    return (\n      <>\n        <Line\n          color={pColor}\n          points={points}\n          idx={idx}\n          addIndex={addIndex}\n          plusLength={plusLength}\n          setPoints={setPoints}\n        />\n        <Points\n          color={pColor}\n          points={points}\n          length={length}\n          movePoint={movePoint}\n        />\n      </>\n    );\n});\n\n\n// --------------------------------------------------------------------\n\n// import React, { useRef, useState, useEffect } from \"react\";\n// import { Line } from \"@react-three/drei\";\n// import { CatmullRomCurve3 } from \"three\";\n// import { prototype } from \"urdf-loader\";\n// import * as THREE from \"three\";\n// import { useThree } from \"@react-three/fiber\";\n\n// // https://threejs.org/docs/#api/en/geometries/TubeGeometry\n// // https://codesandbox.io/s/confetti-forked-4335k?file=/src/index.js\n// export function PathLine(props) {\n//     const {linewidth, points} = props;\n//     return (\n//       <>\n//         <Line\n//           points={points}\n//           color={'#d6ff37'}\n//           lineWidth={linewidth}\n//           dashed={false}\n//         />\n//       </>\n//     )\n//   }\n\n// function makeLine(geometryRef, points) {\n//     var anchors = [];\n//     for (let key in points) {\n//         anchors.push(new THREE.Vector3(...points[key]));\n//     }\n//     const curve = new THREE.CatmullRomCurve3(anchors, true, \"catmullrom\").getPoints(50);\n//     geometryRef.current.setFromPoints(curve);\n// }\n\n// function Fatline({ curve, width, color }) {\n//     const material = useRef()\n//     // useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n//     return (\n//         <mesh>\n//             <meshLine attach=\"geometry\" vertices={curve} />\n//             <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n//         </mesh>\n//     )\n// }\n\n// export function PathLine2(props) {\n//     const {linewidth, points} = props;\n//     const geometryRef = useRef();\n    \n//     useEffect(() => {\n//         makeLine(geometryRef, points);\n//     }, [points]);\n  \n//     return (\n//         <>\n//             <Line\n//                 points={points}\n//                 color={'#d6ff37'}\n//                 lineWidth={linewidth}\n//                 dashed={false}\n//             />\n//         </>\n//     )\n// }\n\n\n\n// // export function BasicLine(props) {\n\n// //     return (\n// //       <mesh castShadow receiveShadow >\n// //         <Line\n// //             points={[[0, 0, 0], [1, 1, 1]]}       // Array of points\n// //             color=\"black\"                   // Default\n// //             lineWidth={1}                   // In pixels (default)\n// //             dashed={false}                  // Default\n// //             vertexColors={[[0, 0, 0], [0, 0, 0]]} // Optional array of RGB values for each point\n// //             // {...lineProps}                  // All THREE.Line2 props are valid\n// //             // {...materialProps}              // All THREE.LineMaterial props are valid\n// //         />\n// //       </mesh>\n// //     )\n// //   }","/home/alejandro/phd_software/Code/Git_repos/FM_symposium/tasho-fmdemo/front-end/src/components/viewer/TennisBalls.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":2,"column":18,"nodeType":"156","messageId":"157","endLine":2,"endColumn":23},{"ruleId":"154","severity":1,"message":"159","line":2,"column":25,"nodeType":"156","messageId":"157","endLine":2,"endColumn":33},{"ruleId":"154","severity":1,"message":"160","line":20,"column":15,"nodeType":"156","messageId":"157","endLine":20,"endColumn":18},{"ruleId":"154","severity":1,"message":"161","line":99,"column":12,"nodeType":"156","messageId":"157","endLine":99,"endColumn":20},{"ruleId":"154","severity":1,"message":"162","line":105,"column":12,"nodeType":"156","messageId":"157","endLine":105,"endColumn":16},{"ruleId":"154","severity":1,"message":"163","line":106,"column":12,"nodeType":"156","messageId":"157","endLine":106,"endColumn":22},{"ruleId":"154","severity":1,"message":"164","line":107,"column":12,"nodeType":"156","messageId":"157","endLine":107,"endColumn":20},{"ruleId":"154","severity":1,"message":"165","line":117,"column":12,"nodeType":"156","messageId":"157","endLine":117,"endColumn":22},{"ruleId":"154","severity":1,"message":"166","line":119,"column":13,"nodeType":"156","messageId":"157","endLine":119,"endColumn":21},{"ruleId":"154","severity":1,"message":"167","line":119,"column":23,"nodeType":"156","messageId":"157","endLine":119,"endColumn":34},{"ruleId":"154","severity":1,"message":"168","line":122,"column":23,"nodeType":"156","messageId":"157","endLine":122,"endColumn":34},{"ruleId":"154","severity":1,"message":"169","line":124,"column":19,"nodeType":"156","messageId":"157","endLine":124,"endColumn":26},{"ruleId":"154","severity":1,"message":"170","line":127,"column":13,"nodeType":"156","messageId":"157","endLine":127,"endColumn":23},{"ruleId":"154","severity":1,"message":"171","line":127,"column":25,"nodeType":"156","messageId":"157","endLine":127,"endColumn":38},{"ruleId":"154","severity":1,"message":"172","line":193,"column":24,"nodeType":"156","messageId":"157","endLine":193,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":201,"column":8,"nodeType":"175","endLine":201,"endColumn":126,"suggestions":"176"},{"ruleId":"154","severity":1,"message":"177","line":250,"column":11,"nodeType":"156","messageId":"157","endLine":250,"endColumn":22},{"ruleId":"154","severity":1,"message":"178","line":272,"column":11,"nodeType":"156","messageId":"157","endLine":272,"endColumn":32},{"ruleId":"154","severity":1,"message":"179","line":299,"column":11,"nodeType":"156","messageId":"157","endLine":299,"endColumn":31},{"ruleId":"154","severity":1,"message":"180","line":359,"column":11,"nodeType":"156","messageId":"157","endLine":359,"endColumn":24},{"ruleId":"154","severity":1,"message":"181","line":384,"column":11,"nodeType":"156","messageId":"157","endLine":384,"endColumn":19},{"ruleId":"154","severity":1,"message":"182","line":415,"column":11,"nodeType":"156","messageId":"157","endLine":415,"endColumn":21},{"ruleId":"154","severity":1,"message":"183","line":423,"column":11,"nodeType":"156","messageId":"157","endLine":423,"endColumn":19},{"ruleId":"173","severity":1,"message":"184","line":495,"column":6,"nodeType":"175","endLine":495,"endColumn":17,"suggestions":"185"},{"ruleId":"154","severity":1,"message":"186","line":4,"column":30,"nodeType":"156","messageId":"157","endLine":4,"endColumn":39},{"ruleId":"154","severity":1,"message":"187","line":5,"column":18,"nodeType":"156","messageId":"157","endLine":5,"endColumn":26},{"ruleId":"154","severity":1,"message":"188","line":6,"column":10,"nodeType":"156","messageId":"157","endLine":6,"endColumn":13},{"ruleId":"154","severity":1,"message":"189","line":7,"column":19,"nodeType":"156","messageId":"157","endLine":7,"endColumn":24},{"ruleId":"154","severity":1,"message":"190","line":11,"column":3,"nodeType":"156","messageId":"157","endLine":11,"endColumn":6},{"ruleId":"154","severity":1,"message":"191","line":14,"column":3,"nodeType":"156","messageId":"157","endLine":14,"endColumn":8},{"ruleId":"154","severity":1,"message":"192","line":27,"column":22,"nodeType":"156","messageId":"157","endLine":27,"endColumn":35},{"ruleId":"154","severity":1,"message":"193","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":18},{"ruleId":"154","severity":1,"message":"194","line":2,"column":5,"nodeType":"156","messageId":"157","endLine":2,"endColumn":13},{"ruleId":"154","severity":1,"message":"195","line":3,"column":5,"nodeType":"156","messageId":"157","endLine":3,"endColumn":14},{"ruleId":"154","severity":1,"message":"196","line":4,"column":5,"nodeType":"156","messageId":"157","endLine":4,"endColumn":18},{"ruleId":"154","severity":1,"message":"197","line":5,"column":5,"nodeType":"156","messageId":"157","endLine":5,"endColumn":15},{"ruleId":"154","severity":1,"message":"198","line":6,"column":5,"nodeType":"156","messageId":"157","endLine":6,"endColumn":16},{"ruleId":"154","severity":1,"message":"186","line":7,"column":5,"nodeType":"156","messageId":"157","endLine":7,"endColumn":14},{"ruleId":"154","severity":1,"message":"199","line":8,"column":5,"nodeType":"156","messageId":"157","endLine":8,"endColumn":12},{"ruleId":"154","severity":1,"message":"200","line":9,"column":5,"nodeType":"156","messageId":"157","endLine":9,"endColumn":11},{"ruleId":"154","severity":1,"message":"193","line":10,"column":5,"nodeType":"156","messageId":"157","endLine":10,"endColumn":13},{"ruleId":"154","severity":1,"message":"201","line":13,"column":15,"nodeType":"156","messageId":"157","endLine":13,"endColumn":20},{"ruleId":"154","severity":1,"message":"202","line":15,"column":12,"nodeType":"156","messageId":"157","endLine":15,"endColumn":18},{"ruleId":"154","severity":1,"message":"203","line":17,"column":12,"nodeType":"156","messageId":"157","endLine":17,"endColumn":18},{"ruleId":"154","severity":1,"message":"204","line":17,"column":20,"nodeType":"156","messageId":"157","endLine":17,"endColumn":29},{"ruleId":"154","severity":1,"message":"205","line":17,"column":31,"nodeType":"156","messageId":"157","endLine":17,"endColumn":39},{"ruleId":"154","severity":1,"message":"187","line":17,"column":41,"nodeType":"156","messageId":"157","endLine":17,"endColumn":49},{"ruleId":"154","severity":1,"message":"206","line":19,"column":12,"nodeType":"156","messageId":"157","endLine":19,"endColumn":22},{"ruleId":"154","severity":1,"message":"207","line":22,"column":12,"nodeType":"156","messageId":"157","endLine":22,"endColumn":25},{"ruleId":"154","severity":1,"message":"208","line":23,"column":12,"nodeType":"156","messageId":"157","endLine":23,"endColumn":22},{"ruleId":"154","severity":1,"message":"209","line":25,"column":5,"nodeType":"156","messageId":"157","endLine":25,"endColumn":16},{"ruleId":"154","severity":1,"message":"210","line":26,"column":5,"nodeType":"156","messageId":"157","endLine":26,"endColumn":24},{"ruleId":"154","severity":1,"message":"211","line":27,"column":5,"nodeType":"156","messageId":"157","endLine":27,"endColumn":10},{"ruleId":"154","severity":1,"message":"212","line":28,"column":5,"nodeType":"156","messageId":"157","endLine":28,"endColumn":13},{"ruleId":"154","severity":1,"message":"213","line":29,"column":5,"nodeType":"156","messageId":"157","endLine":29,"endColumn":18},{"ruleId":"154","severity":1,"message":"214","line":30,"column":5,"nodeType":"156","messageId":"157","endLine":30,"endColumn":9},{"ruleId":"154","severity":1,"message":"215","line":33,"column":5,"nodeType":"156","messageId":"157","endLine":33,"endColumn":12},{"ruleId":"154","severity":1,"message":"216","line":34,"column":5,"nodeType":"156","messageId":"157","endLine":34,"endColumn":11},{"ruleId":"154","severity":1,"message":"217","line":36,"column":5,"nodeType":"156","messageId":"157","endLine":36,"endColumn":16},{"ruleId":"154","severity":1,"message":"218","line":37,"column":5,"nodeType":"156","messageId":"157","endLine":37,"endColumn":14},{"ruleId":"154","severity":1,"message":"219","line":38,"column":5,"nodeType":"156","messageId":"157","endLine":38,"endColumn":13},{"ruleId":"154","severity":1,"message":"220","line":39,"column":5,"nodeType":"156","messageId":"157","endLine":39,"endColumn":27},{"ruleId":"154","severity":1,"message":"221","line":40,"column":5,"nodeType":"156","messageId":"157","endLine":40,"endColumn":30},{"ruleId":"154","severity":1,"message":"203","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":16},{"ruleId":"154","severity":1,"message":"222","line":62,"column":15,"nodeType":"156","messageId":"157","endLine":62,"endColumn":20},{"ruleId":"154","severity":1,"message":"223","line":62,"column":22,"nodeType":"156","messageId":"157","endLine":62,"endColumn":30},{"ruleId":"173","severity":1,"message":"224","line":95,"column":8,"nodeType":"175","endLine":95,"endColumn":16,"suggestions":"225"},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Redirect' is defined but never used.","'jsx' is defined but never used.","'mainArea' is assigned a value but never used.","'line' is assigned a value but never used.","'lineTunnel' is assigned a value but never used.","'lineTraj' is assigned a value but never used.","'boundaries' is assigned a value but never used.","'dragging' is assigned a value but never used.","'setDragging' is assigned a value but never used.","'setMaxAngle' is assigned a value but never used.","'setInit' is assigned a value but never used.","'consoleLog' is assigned a value but never used.","'setConsoleLog' is assigned a value but never used.","'setExpertMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getOcpState' and 'solverState'. Either include them or remove the dependency array.","ArrayExpression",["228"],"'updateSwing' is assigned a value but never used.","'updateObstacleCounter' is assigned a value but never used.","'limitObjectsInCanvas' is assigned a value but never used.","'distanceToDOM' is assigned a value but never used.","'showCode' is assigned a value but never used.","'ringAppend' is assigned a value but never used.","'ringFlat' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateDOMcoordinates'. Either include it or remove the dependency array.",["229"],"'useEffect' is defined but never used.","'useThree' is defined but never used.","'css' is defined but never used.","'Debug' is defined but never used.","'Box' is defined but never used.","'Plane' is defined but never used.","'setPointsTraj' is assigned a value but never used.","'useState' is defined but never used.","'Suspense' is defined but never used.","'createRef' is defined but never used.","'createContext' is defined but never used.","'useContext' is defined but never used.","'useCallback' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'THREE' is defined but never used.","'extend' is defined but never used.","'Canvas' is defined but never used.","'useLoader' is defined but never used.","'useFrame' is defined but never used.","'useTexture' is defined but never used.","'OrbitControls' is defined but never used.","'GLTFLoader' is defined but never used.","'BoxGeometry' is defined but never used.","'MeshLambertMaterial' is defined but never used.","'Shape' is defined but never used.","'geometry' is defined but never used.","'ShapeGeometry' is defined but never used.","'Mesh' is defined but never used.","'Physics' is defined but never used.","'useBox' is defined but never used.","'useCylinder' is defined but never used.","'useSphere' is defined but never used.","'usePlane' is defined but never used.","'useConeTwistConstraint' is defined but never used.","'usePointToPointConstraint' is defined but never used.","'mouse' is assigned a value but never used.","'viewport' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'color', 'movePoint', and 'points'. Either include them or remove the dependency array.",["230"],"no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [tunnel, A, B, C, D, enableNoSwing, enableObstacleAvoidance, obs1, obs2, trackingMode, trackingWeight, maxAngle, init, problemMode, getOcpState, solverState]",{"range":"237","text":"238"},"Update the dependencies array to be: [craneArea, updateDOMcoordinates]",{"range":"239","text":"240"},"Update the dependencies array to be: [color, length, movePoint, points]",{"range":"241","text":"242"},[6970,7088],"[tunnel, A, B, C, D, enableNoSwing, enableObstacleAvoidance, obs1, obs2, trackingMode, trackingWeight, maxAngle, init, problemMode, getOcpState, solverState]",[16850,16861],"[craneArea, updateDOMcoordinates]",[2848,2856],"[color, length, movePoint, points]"]